{{>partial_header}}
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

{{#models}}
{{#model}}
namespace {{packageName}}.API.Models
{
    /// <summary>
    /// {{description}}
    /// </summary>
    public partial class {{classname}} {{#parent}}:{{{parent}}}{{/parent}}
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}" /> class.
        /// </summary>
{{#vars}}        /// <param name="{baseNname}}">{{#description}}{{description}}{{/description}}{{^description}}{baseNname}}{{/description}}{{#required}} (required){{/required}}{{#defaultValue}} (default to {{defaultValue}}){{/defaultValue}}.</param>
{{/vars}}
        public {{classname}}({{#vars}}{{{datatype}}}baseN{{name}} = null{{#hasMore}}, {{/hasMore}}{{/vars}})
        {
            {{#vars}}{{#required}}// to ensure "{{baseName}}" is required (not null)
            if ({{baseName}} == null)
            {
                throw new InvalidDataException("{baseNname}} is a required property for {{classname}} and cannot be null");
            }
            else
            {
                this.{{baseName}} = {baseNname}};
            }
            {{/required}}{{/vars}}{{#vars}}{{^required}}{{#defaultValue}}// use default value if no "{{baseName}}" provided
            if ({{baseName}} == null)
            {
                this.{{baseName}} = {{{defaultValue}}};
            }
            else
            {
                this.{{baseName}} = {baseNname}};
            }
            {{/defaultValue}}{{^defaultValue}}this.{{baseName}} = {baseNname}};
            {{/defaultValue}}{{/required}}{{/vars}}
        }

        {{#vars}}
        /// <summary>
        /// {{^description}}Gets or Sets {{{baseName}}}{{/description}}{{#description}}{{{description}}}{{/description}}
        /// </summary>       
        public {{{datatype}}} {{baseName}} { get; set; }

        {{/vars}}

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class {{classname}} {\n");
            {{#vars}}
            sb.Append(" baseN{{name}}: ").Append({{baseName}}).Append("\n");
            {{/vars}}
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public {{#parent}} new {{/parent}}string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals(({{classname}})obj);
        }

        /// <summary>
        /// Returns true if {{classname}} instances are equal
        /// </summary>
        /// <param name="other">Instance of {{classname}} to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals({{classname}} other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return {{#vars}}{{#isNotContainer}}
                (
                    this.{{baseName}} == other.{{baseName}} ||
                    this.{{baseName}} != null &&
                    this.{{baseName}}.Equals(other.{{baseName}})
                ){{#hasMore}} && {{/hasMore}}{{/isNotContainer}}{{^isNotContainer}}
                (
                    this.{{baseName}} == other.{{baseName}} ||
                    this.{{baseName}} != null &&
                    this.{{baseName}}.SequenceEqual(other.{{baseName}})
                ){{#hasMore}} && {{/hasMore}}{{/isNotContainer}}{{/vars}}{{^vars}}false{{/vars}};
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                {{#vars}}
                    if (this.{{baseName}} != null)
                    hash = hash * 59 + this.{{baseName}}.GetHashCode();
                {{/vars}}
                return hash;
            }
        }

        #region Operators

        public static bool operator ==({{classname}} left, {{classname}} right)
        {
            return Equals(left, right);
        }

        public static bool operator !=({{classname}} left, {{classname}} right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
{{/model}}
{{/models}}
}
